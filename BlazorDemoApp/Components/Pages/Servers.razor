@page "/servers" 
@* above page directive marks this component as routable *@
@page "/servers/back_from/{cityName}"

@using BlazorDemoApp.StateStore

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject MadisonOnlineServerStore MadisonOnlineServerStore
@inject HuntsvilleOnlineServerStore HuntsvilleOnlineServerStore
@inject DecaturOnlineServerStore DecaturOnlineServerStore
@inject GadsdenOnlineServerStore GadsdenOnlineServerStore
@inject SelmaOnlineServerStore SelmaOnlineServerStore
@inject MobileOnlineServerStore MobileOnlineServerStore

<PageTitle>Servers</PageTitle> 
<h3>Servers</h3>
<br/>
<br/>

<CityListComponent @ref="cityListComponent" 
    SelectCityCallback="HandleCitySelection"
    selectedCity = "@this.selectedCity">
</CityListComponent>
<br />
<br />

<ServerSearchComponent @ref="searchComponent" SearchServerCallback="HandleSearchServer"></ServerSearchComponent>
@*  @serverFilter *@
<br/>
@* recommended to specify render mode where the component is used*@
@*it can be specied in a page, or globally in the App.razor in the Routes*@
@* <ServerComponent @rendermode="InteractiveServer"></ServerComponent>  *@
@* <ServerComponent></ServerComponent> *@    

<CascadingValue Name="SelectedCity" Value="@selectedCity">  @* used to pass value from parent component to a particular child component *@
    <ServerListComponent 
    @rendermode="InteractiveServer" 
    CityName="@this.selectedCity"
    SearchFilter="@searchFilter">
    </ServerListComponent>   @* //child component *@    
</CascadingValue>
<br />

@* <a href="/servers/add" class="btn btn-primary">Add Server</a> *@
<a href="/servername" class="btn btn-primary">Add Server</a>


@code {
    [Parameter]
    public string? CityName { get; set; }
    // private List<String> cities = CitiesRepo.GetCities();
    private string? selectedCity = "Madison";
    // public List<Server>? servers;
    // private string _serverFilter = "";
    private string searchFilter = "";

    private CityListComponent? cityListComponent;

    private ServerSearchComponent? searchComponent;

    // // private void HandleSearch()
    // // {
    // //     this.servers = ServerRepo.SearchServers(serverFilter);
    // //     // this.selectedCity = string.Empty;
    // // }
    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;
        this.searchFilter = string.Empty;

        searchComponent?.ClearSearchFilter(); //Clear the search bar
    }

    private void HandleSearchServer(string searchFilter)
    {
        this.searchFilter = searchFilter;
        cityListComponent?.ClearSelection(); //clears city (no longer highlighted) by referncing child component using @ref
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (NavigationManager.Uri.Contains("back_from") && !string.IsNullOrWhiteSpace(CityName))
            {
                selectedCity = CityName;
                StateHasChanged();
            }


            var madServers = ServerRepo.GetServersByCity("Madison");
            if (madServers != null)
            {
                MadisonOnlineServerStore.SetNumberServersOnline(madServers.Count(x => x.IsActive));
            }
            var huntsServers = ServerRepo.GetServersByCity("Huntsville");
            if (huntsServers != null)
            {
                HuntsvilleOnlineServerStore.SetNumberServersOnline(huntsServers.Count(x => x.IsActive));
            }
            var decServers = ServerRepo.GetServersByCity("Decatur");
            if (decServers != null)
            {
                DecaturOnlineServerStore.SetNumberServersOnline(decServers.Count(x => x.IsActive));
            }
            var gadServers = ServerRepo.GetServersByCity("Gadsden");
            if (gadServers != null)
            {
                GadsdenOnlineServerStore.SetNumberServersOnline(gadServers.Count(x => x.IsActive));
            }
            var selServers = ServerRepo.GetServersByCity("Selma");
            if (selServers != null)
            {
                SelmaOnlineServerStore.SetNumberServersOnline(selServers.Count(x => x.IsActive));
            }
            var mobServers = ServerRepo.GetServersByCity("Mobile");
            if (mobServers != null)
            {
                MobileOnlineServerStore.SetNumberServersOnline(mobServers.Count(x => x.IsActive));
            }
        }
    }
}
