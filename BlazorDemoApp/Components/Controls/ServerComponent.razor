@using BlazorDemoApp.StateStore
@inject NavigationManager NavigationManager
@inject MadisonOnlineServerStore MadisonOnlineServerStore
@inject HuntsvilleOnlineServerStore HuntsvilleOnlineServerStore
@inject DecaturOnlineServerStore DecaturOnlineServerStore
@inject GadsdenOnlineServerStore GadsdenOnlineServerStore
@inject SelmaOnlineServerStore SelmaOnlineServerStore
@inject MobileOnlineServerStore MobileOnlineServerStore

@* <h3>ServerComponent</h3> *@
@* this is non routable component as it does not have the '@page' directive *@
@* <p> @status</p> *@

@if (Server != null)
{
    @* <EditForm Model="server" FormName="serverCompForm" OnSubmit="ChangeStatus"> *@
    /*using Enhance=true makes the page interactive i.e the page is partially rerendered*/
    @* <EditForm Enhance="true" Model="server" FormName="serverCompForm" OnSubmit="ChangeStatus"> *@
    @* <div data-name="@server.Name" data-status="Server is @(server.IsActive?"online":"offline")"
             style="@($"color:{(server.IsActive?"green":"red")}")">
            @server.Name is in @server.City and is @(server.IsActive ? "online" : "offline")
            &nbsp;
            <button type="button" class="btn btn-primary" @onclick="ChangeStatus"> Turn On/Off </button>
        </div> *@
    @* </EditForm> *@

    <li @key="Server.Id" style="background-color:@GetBackgroundColor()">
        @Server.Name in @Server.City is
        <span style="color:@((Server.IsActive? "green" : "red"))">
            @(Server.IsActive ? "online" : "offline")
        </span>
        &nbsp;

        @if(Server.IsActive)
        {
            <button type="button" class="btn btn-outline-danger" @onclick="@(()=>{SetServerStatus(false);})">Turn Off</button>            
        }
        else
        {
            <button type="button" class="btn btn-outline-success" @onclick="@(()=>{SetServerStatus(true);})">Turn On</button>           
        }

        &nbsp;
        <a href="/Servers/@Server.Id" class="btn btn-link">Edit</a>
        &nbsp;
        <br />

        @if (Server.IsActive)
        {           
            @* Random random = new();
            int randomNum = random.Next(0, 500); *@
            <text>@randomNum users are online</text>

        }
        else
        {           
            <text> N/A </text>
        }
        <br />

        <EditForm Model="Server"
        FormName="@($"form-Server-{Server.Id}")"
        OnValidSubmit="@(()=>{DeleteServer(Server.Id);})"> @* explicit Razor syntax *@
            <button type="submit" class="btn btn-primary">Delete</button>
        </EditForm>
    </li>
    <br />
}

@code {
    // private string status = "This is a non routable component as it does not have 'the@page' directive";
    // [SupplyParameterFromForm]
    [Parameter]
    public Server? Server { get; set; } 

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    Random random = new();
    int randomNum;

    public ServerComponent()
    {
        this.randomNum = random.Next(0, 500); ;
    }

    @* protected override void OnParametersSet()
    {
        server ??= new Server { Name = "Server1", City = "Madison" };
    } *@

    // private void ChangeStatus()
    // {
    //     if(server != null)
    //     server.IsActive = !server.IsActive;
    // }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServerRepo.DeleteServer(serverId);
            NavigationManager.NavigateTo("/servers", true); //true- forece reloads the page
        }
    }

    private string GetBackgroundColor()
    {
        if (SelectedCity != null)
        {
            switch (this.SelectedCity)
            {
                case "Mobile":
                    return "#d0e9f6";
                case "Decatur":
                    return "#cce9f1";
                case "Gadsden":
                    return "#A4DDED";
                case "Huntsville":
                    return "#E1EBEE";
                case "Madison":
                    return "#F0F8FF";
                case "Selma":
                    return "#B9D9EB";
                default: return "White";

            }
        }
        else
        {
            return "white";
        }
    }

    private void SetServerStatus(bool status)
    {
        if(this.Server is not null && this.Server.IsActive != status)
        {
            int num = 0;
            switch (this.Server.City)
            {
                case "Madison":
                    num = MadisonOnlineServerStore.GetNumberServersOnline();
                    if (status)                    
                        MadisonOnlineServerStore.SetNumberServersOnline(num + 1);                    
                    else                    
                        MadisonOnlineServerStore.SetNumberServersOnline(num - 1);                    
                    break;
                case "Huntsville":
                    num = HuntsvilleOnlineServerStore.GetNumberServersOnline();
                    if (status)                   
                        HuntsvilleOnlineServerStore.SetNumberServersOnline(num + 1);                    
                    else                    
                        HuntsvilleOnlineServerStore.SetNumberServersOnline(num - 1);                   
                    break;
                case "Decatur":
                    num = DecaturOnlineServerStore.GetNumberServersOnline();
                    if (status)
                        DecaturOnlineServerStore.SetNumberServersOnline(num + 1);
                    else
                        DecaturOnlineServerStore.SetNumberServersOnline(num - 1);
                    break;
                case "Gadsden":
                    num = GadsdenOnlineServerStore.GetNumberServersOnline();
                    if (status)
                        GadsdenOnlineServerStore.SetNumberServersOnline(num + 1);
                    else
                        GadsdenOnlineServerStore.SetNumberServersOnline(num - 1);
                    break;
                case "Selma":
                    num = SelmaOnlineServerStore.GetNumberServersOnline();
                    if (status)
                        SelmaOnlineServerStore.SetNumberServersOnline(num + 1);
                    else
                        SelmaOnlineServerStore.SetNumberServersOnline(num - 1);
                    break;
                case "Mobile":
                    num = MobileOnlineServerStore.GetNumberServersOnline();
                    if (status)
                        MobileOnlineServerStore.SetNumberServersOnline(num + 1);
                    else
                        MobileOnlineServerStore.SetNumberServersOnline(num - 1);
                    break;
                
            }
            
            this.Server.IsActive = status;
        }
    }
}
