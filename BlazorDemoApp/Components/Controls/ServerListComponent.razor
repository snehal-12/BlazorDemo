@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager NavigationManager

@* @if (this.servers != null && this.servers.Count > 0)
{
    <QuickGrid Items="servers.AsQueryable()">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(p => p.City)"></PropertyColumn>
        <TemplateColumn Title="Status">
            @if(context.IsActive )
            {
                <div style="color:green">
                    Online
                </div>
            }
            else
            {
                <div style="color:red">
                    Offline
                </div>
            }
        </TemplateColumn>
        <TemplateColumn Title="OnlineUsers">
            @if (context.IsActive)
            {
                Random random = new();
                int randomNum = random.Next(0, 500);
                <text>@randomNum users are online</text>
            }
            else
            {
                <text> N/A </text>
            }
        </TemplateColumn>
        <TemplateColumn>
            @if (context.IsActive)
            {
                <button type="button" class="btn btn-outline-danger" @onclick="@(()=>{context.IsActive = false;})">Turn Off</button>
            }
            else
            {
                <button type="button" class="btn btn-outline-success" @onclick="@(()=>{context.IsActive = true;})">Turn On</button>
            }
        </TemplateColumn>
        <TemplateColumn>
            <a href="/Servers/@context.Id" class="btn btn-link">Edit</a>
        </TemplateColumn>
        <TemplateColumn>
            <ChildContent Context ="server">
                <EditForm Model="server"
                FormName="@($"form-Server-{server.Id}")"
                OnValidSubmit="@(()=>{DeleteServer(server.Id);})">  @* explicit Razor syntax *@
                    @* <button type="submit" class="btn btn-primary">Delete</button> *@
               @*  </EditForm>
            </ChildContent>
        </TemplateColumn>

    </QuickGrid> *@

@*} *@

@if (servers is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <RepeaterComponent Items="servers">
            <Header>
            <thead>
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        City
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                        People Online
                    </th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            </Header>
            <Row Context="server">
                <ServerComponent Server="server"></ServerComponent>
            </Row>
        </RepeaterComponent>
    </table>
} 


@code {
    [Parameter]
    public string? CityName { get; set; }
    // private List<Server> servers = ServerRepo.GetServersByCity("Madison");
    [Parameter]
    public string? SearchFilter { get; set; } = "";

    private List<Server>? servers;

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(this.SearchFilter))
        {
            servers = ServerRepo.GetServersByCity(CityName ?? "Madison");
        }
        else
            servers = ServerRepo.SearchServers(this.SearchFilter);

    }

    // private void DeleteServer(int serverId)
    // {
    //     if (serverId > 0)
    //     {
    //         ServerRepo.DeleteServer(serverId);
    //         NavigationManager.NavigateTo($"/servers/back_from/{this.CityName}", true); //true- force reloads the page
    //     }
    // }
    
}
